// src/main/java/com/example/demo/service/ProjectMemberService.java
package com.example.demo.service;

import com.example.demo.model.*;
import com.example.demo.repository.ProjectMemberRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ProjectMemberService {

    @Autowired
    private ProjectMemberRepository projectMemberRepository;

    @Autowired
    private NotificationService notificationService;

    @Autowired
    private MessageService messageService;

    // Dodaj u≈ºytkownika do projektu (g≈Ç√≥wna metoda)
    @Transactional
    public ProjectMember addMember(Project project, User user, ProjectRole role, User addedBy) {
        // Sprawd≈∫ czy u≈ºytkownik ju≈º jest cz≈Çonkiem
        boolean alreadyMember = project.getMembers().stream()
                .anyMatch(m -> m.getUser().equals(user));

        ProjectMember member = new ProjectMember(project, user, role);
        ProjectMember saved = projectMemberRepository.save(member);

        // ‚úÖ Powiadom tylko je≈õli to nowy cz≈Çonek
        if (!alreadyMember) {
            notificationService.createNotification(
                    user,
                    "üéØ Dodano Ciƒô do projektu",
                    addedBy.getUsername() + " doda≈Ç Ciƒô do projektu: \"" + project.getName() + "\" jako " + getRoleDisplayName(role),
                    NotificationType.PROJECT_MEMBER_ADDED,
                    project.getId(),
                    "/projects/" + project.getId()
            );
        }

        return saved;
    }

    // ‚úÖ ALIAS dla addMember - u≈ºywany w ProjectApiController
    @Transactional
    public ProjectMember addMemberToProject(Project project, User user, ProjectRole role) {
        return addMember(project, user, role, user); // addedBy = user (tymczasowo)
    }

    // Usu≈Ñ u≈ºytkownika z projektu
    @Transactional
    public void removeMemberFromProject(Project project, User user) {
        Optional<ProjectMember> memberOpt = projectMemberRepository.findByProjectAndUser(project, user);

        if (memberOpt.isPresent()) {
            ProjectMember member = memberOpt.get();
            projectMemberRepository.delete(member);

            // ‚úÖ Powiadom u≈ºytkownika
            notificationService.createNotification(
                    user,
                    "‚ùå Usuniƒôto z projektu",
                    "Zosta≈Çe≈õ usuniƒôty z projektu: \"" + project.getName() + "\"",
                    NotificationType.PROJECT_MEMBER_REMOVED,
                    project.getId(),
                    "/projects"
            );
        }
    }

    // Zmie≈Ñ rolƒô u≈ºytkownika w projekcie
    @Transactional
    public void updateMemberRole(Project project, User user, ProjectRole newRole, User changedBy) {
        ProjectMember member = projectMemberRepository.findByProjectAndUser(project, user)
                .orElseThrow(() -> new RuntimeException("Cz≈Çonek projektu nie istnieje"));

        ProjectRole oldRole = member.getRole();
        member.setRole(newRole);
        projectMemberRepository.save(member);

        // ‚úÖ Powiadom u≈ºytkownika
        notificationService.createNotification(
                user,
                "üîÑ Zmiana roli w projekcie",
                changedBy.getUsername() + " zmieni≈Ç TwojƒÖ rolƒô w projekcie \"" + project.getName() +
                        "\" z " + getRoleDisplayName(oldRole) + " na " + getRoleDisplayName(newRole),
                NotificationType.PROJECT_ROLE_CHANGED,
                project.getId(),
                "/projects/" + project.getId()
        );
    }

    // ‚úÖ ALIAS dla updateMemberRole - u≈ºywany w ProjectApiController
    @Transactional
    public void changeUserRole(Project project, User user, ProjectRole newRole) {
        updateMemberRole(project, user, newRole, user); // changedBy = user (tymczasowo)
    }

    // Pobierz cz≈Çonka projektu
    public Optional<ProjectMember> getProjectMember(Project project, User user) {
        return projectMemberRepository.findByProjectAndUser(project, user);
    }

    // Pobierz wszystkich cz≈Çonk√≥w projektu
    public List<ProjectMember> getProjectMembers(Project project) {
        return projectMemberRepository.findByProject(project);
    }

    // Sprawd≈∫ czy u≈ºytkownik jest cz≈Çonkiem projektu
    public boolean isProjectMember(Project project, User user) {
        return projectMemberRepository.existsByProjectAndUser(project, user);
    }

    // Sprawd≈∫ czy u≈ºytkownik jest adminem projektu
    public boolean isProjectAdmin(Project project, User user) {
        Optional<ProjectMember> memberOpt = getProjectMember(project, user);
        return memberOpt.isPresent() && memberOpt.get().getRole() == ProjectRole.ADMIN;
    }

    // Sprawd≈∫ czy u≈ºytkownik mo≈ºe edytowaƒá projekt
    public boolean canEditProject(Project project, User user) {
        return isProjectAdmin(project, user) || project.getCreatedBy().equals(user);
    }

    // Pobierz rolƒô u≈ºytkownika w projekcie
    public ProjectRole getUserRole(Project project, User user) {
        return getProjectMember(project, user)
                .map(ProjectMember::getRole)
                .orElse(null);
    }

    // ‚úÖ POPRAWKA: getUserProjects zwraca List<Project>, NIE List<ProjectMember>
    public List<Project> getUserProjects(User user) {
        List<ProjectMember> memberships = projectMemberRepository.findByUser(user);
        return memberships.stream()
                .map(ProjectMember::getProject)
                .distinct()
                .collect(Collectors.toList());
    }

    // Pobierz cz≈Çonk√≥w z okre≈õlonƒÖ rolƒÖ
    public List<ProjectMember> getMembersByRole(Project project, ProjectRole role) {
        return projectMemberRepository.findByProjectAndRole(project, role);
    }

    // ‚úÖ DODANA METODA - u≈ºywana w r√≥≈ºnych miejscach
    public boolean existsByProjectAndUser(Project project, User user) {
        return projectMemberRepository.existsByProjectAndUser(project, user);
    }

    // Helper: Wy≈õwietlana nazwa roli
    private String getRoleDisplayName(ProjectRole role) {
        return switch (role) {
            case ADMIN -> "Administrator";
            case MEMBER -> "Cz≈Çonek";
            case VIEWER -> "Obserwator";
        };
    }
}